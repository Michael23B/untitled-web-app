@model Web.Models.ViewModels.Pages.PageViewModel

@{
    ViewBag.Title = "Edit Page";

    //Used to set readonly when editing the homepage slug
    //Bug: setting slug to home and then being told you cannot do that will refresh the page and make the field readonly
    bool readOnly = (Model.Slug == "home");
}

<h2>Edit Page</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>&#9851; Recycle this stinky old page &#9851;</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Slug, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <!--Sets the slug to readonly if it is 'home'-->
                @Html.EditorFor(model => model.Slug, readOnly ?
                    (object)new { htmlAttributes = new { @class = "form-control", @readonly = "doesntMatterWhatITypeHere" } }
                    : new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.Slug, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Body, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Body, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HasSidebar, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.HasSidebar)
                    @Html.ValidationMessageFor(model => model.HasSidebar, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-success btn-outline" />
            </div>
        </div>
    </div>
    <hr />
}

<div>
    @Html.ActionLink("Back to Pages", "Index", null, new { @class = "btn btn-primary btn-outline" })
</div>

@section Scripts {
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>
    <script>
        CKEDITOR.replace("Body");
    </script>
}